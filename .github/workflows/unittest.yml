name: Unit Tests


on: [push, pull_request]


jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Docker images
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker-images
          key: docker-images-${{ hashFiles('.github/docker-images.txt') }}-v1
          restore-keys: |
            docker-images-

      - name: Load cached Docker images
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: |
          if [ -d "/tmp/docker-images" ]; then
            for img in /tmp/docker-images/*.tar; do
              if [ -f "$img" ]; then
                echo "Loading cached image: $(basename $img)"
                docker load -i "$img"
              fi
            done
          fi

      - name: Pull and save Docker images
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          DOCKER_IMAGES=(
            "agentscope/runtime-sandbox-bfcl:latest"
            "agentscope/runtime-sandbox-appworld:latest"
            "agentscope/runtime-sandbox-base:latest"
            "agentscope/runtime-sandbox-browser:latest"
            "agentscope/runtime-sandbox-filesystem:latest"
          )

          mkdir -p /tmp/docker-images

          for img in "${DOCKER_IMAGES[@]}"; do
            echo "Pulling image: $img"
            docker pull "$img"
            img_file=$(echo "$img" | sed 's/[\/:]/_/g')
            docker save "$img" -o "/tmp/docker-images/${img_file}.tar"
          done
          echo "All Docker images pulled and saved successfully."

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Update setuptools
        run: |
          pip install --upgrade pip
          pip install setuptools==78.1.1 wheel==0.45.1

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$PYTHONPATH:${{ github.workspace }}/src" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          export PIP_DEFAULT_TIMEOUT=300
          pip install -q -e ".[dev,sandbox,agentscope,langgraph,agno,a2a,autogen,langchain_rag]"

      - name: Run tests with coverage
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
        run: |
          coverage run -m pytest tests --log-cli-level=DEBUG

      - name: Generate coverage report
        run: |
          coverage report -m
